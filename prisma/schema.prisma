generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id
  email     String   @unique
  username  String   @unique
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isPrivateLibrary Boolean @default(false)
  library          Game[]

  friends         User[] @relation("Friends")
  friendsRelation User[] @relation("Friends")

  sentFriendRequests     FriendRequest[] @relation("SentFriendRequest")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequest")

  conversations Conversation[]
  messages      Message[]
  seenMessages Message[]    @relation("SeenBy")

  gameReviews  GameReview[]
  gameReviewVotes GameReviewVote[]
}

model FriendRequest {
  createdAt DateTime @default(now())

  senderUsername String
  sender         User   @relation("SentFriendRequest", fields: [senderUsername], references: [username], onDelete: Cascade)

  receiverUsername String
  receiver         User   @relation("ReceivedFriendRequest", fields: [receiverUsername], references: [username], onDelete: Cascade)

  @@id([senderUsername, receiverUsername])
  @@index([senderUsername])
  @@index([receiverUsername])
}

model Conversation {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())

  firstUserUsername  String
  secondUserUsername String
  users              User[]
  messages           Message[]
}

model Message {
  id        String   @id @default(uuid())
  body      String?  @db.Text
  image     String?
  createdAt DateTime @default(now())

  replyingTo Message[] @relation("ReplyTo")
  repliedTo  Message[] @relation("ReplyTo")

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  seenBy User[] @relation("SeenBy")

  @@index([conversationId])
  @@index([senderId])
}

model Game {
  id          Int
  name        String
  totalRating Int
  coverUrl    String
  releaseDate DateTime?
  category    Int
  themes      String    @default("") //? [23, 64] => "23,64" Since MySql doesn't support arrays
  genres      String    @default("")
  gameModes   String    @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status     GameStatus @default(WANT_TO_PLAY)
  userRating Int?
  playTime   Int?       @default(0)
  finishedAt DateTime?
  notes      String?    @default("")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  gameReviews GameReview[]

  @@id([userId, id])
  @@index([userId])
}

enum GameStatus {
  WANT_TO_PLAY
  COMPLETED
  PLAYING
  WANT_TO_REPLAY
  ABANDONED
}

model GameReview {
  id         String  @id @default(uuid())
  title      String
  body       String  @db.Text
  rating     Int
  hasSpoiler Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gameId Int
  game   Game @relation(fields: [gameId, userId], references: [id, userId], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  votes GameReviewVote[]

  @@index([gameId, userId])
  @@index([userId])
}

enum VoteType {
  UP
  DOWN
}

model GameReviewVote {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  gameReviewId String
  gameReview   GameReview @relation(fields: [gameReviewId], references: [id])

  type VoteType

  @@id([userId, gameReviewId])
}
